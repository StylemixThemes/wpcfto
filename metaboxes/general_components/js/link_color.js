(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Vue.component('wpcfto_link_color', {
  props: ['fields', 'field_label', 'field_name', 'field_id', 'field_value'],
  components: {
    'slider-picker': VueColor.Chrome
  },
  data: function data() {
    return {
      link: {},
      copy_link: {}
    };
  },
  template: "\n        <div class=\"wpcfto_generic_field wpcfto_generic_field_flex_input\" v-bind:class=\"field_id\">\n            <label v-html=\"field_label\"></label>\n            <div class=\"wpcfto_link_color\">\n                <div class=\"wpcfto_link_color_group\">\n                    <label>Regular</label>\n                    <div class=\"stm_colorpicker_wrapper\">\n                        <span v-bind:style=\"{'background-color': link.regular.input_value}\"></span>\n                        <input type=\"text\" name=\"regular\" v-model=\"link.regular.input_value\"/>\n                        <div><slider-picker v-model=\"link.regular.value\"></slider-picker></div>\n                    </div>\n                </div>\n                \n                <div class=\"wpcfto_link_color_group\">\n                    <label>Hover</label>\n                    <div class=\"stm_colorpicker_wrapper\">\n                        <span v-bind:style=\"{'background-color': link.hover.input_value}\"></span>\n                        <input type=\"text\" name=\"hover\" v-model=\"link.hover.input_value\"/>\n                        <div><slider-picker v-model=\"link.hover.value\"></slider-picker></div>\n                    </div>\n                </div>\n                \n                <div class=\"wpcfto_link_color_group\">\n                    <label>Active</label>\n                    <div class=\"stm_colorpicker_wrapper\">\n                        <span v-bind:style=\"{'background-color': link.active.input_value}\"></span>\n                        <input type=\"text\" name=\"active\" v-model=\"link.active.input_value\"/>\n                        <div><slider-picker v-model=\"link.active.value\"></slider-picker></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    ",
  created: function created() {
    // JSON parse for Post Meta
    if (typeof this.field_value === 'string' && WpcftoIsJsonString(this.field_value)) {
      this.field_value = JSON.parse(this.field_value);
    }

    this.link = {
      regular: {
        input_value: typeof this.field_value.regular !== 'undefined' ? this.field_value.regular : '',
        value: typeof this.field_value.regular !== 'undefined' ? this.field_value.regular : ''
      },
      hover: {
        input_value: typeof this.field_value.hover !== 'undefined' ? this.field_value.hover : '',
        value: typeof this.field_value.hover !== 'undefined' ? this.field_value.hover : ''
      },
      active: {
        input_value: typeof this.field_value.active !== 'undefined' ? this.field_value.active : '',
        value: typeof this.field_value.active !== 'undefined' ? this.field_value.active : ''
      }
    };
    this.set_copy_link();
  },
  methods: {
    vuecolor_to_string: function vuecolor_to_string(color) {
      return color.a === 1 ? color.hex : 'rgba(' + color.rgba.r + ',' + color.rgba.g + ',' + color.rgba.b + ',' + color.rgba.a + ')';
    },
    set_copy_link: function set_copy_link() {
      this.copy_link = JSON.parse(JSON.stringify(this.link));
    }
  },
  watch: {
    link: {
      deep: true,
      handler: function handler(link) {
        var _this = this;

        var value = {};
        Object.keys(link).forEach(function (key) {
          if (link[key].input_value !== _this.copy_link[key].input_value) {
            value[key] = link[key].input_value;

            _this.$set(link[key], 'value', value[key]);
          } else {
            value[key] = typeof link[key].value === 'string' ? link[key].value : _this.vuecolor_to_string(link[key].value);

            _this.$set(link[key], 'input_value', value[key]);
          }
        });
        this.set_copy_link();
        this.$emit('wpcfto-get-value', value);
      }
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}]},{},[1])